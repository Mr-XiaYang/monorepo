{"version":3,"file":"index.js","sources":["../src/plugins/cors.ts","../src/plugins/swagger.ts","../src/plugins/websocket.ts","../src/plugins/index.ts","../src/routes/auth/index.ts","../src/routes/board/bitmap.ts","../src/routes/board/draw.ts","../src/routes/board/pixel.ts","../src/routes/board/ws.ts","../src/routes/board/index.ts","../src/routes/index.ts","../src/storage/client/redis.ts","../src/storage/index.ts","../src/config.ts","../src/index.ts"],"sourcesContent":["import fastifyPlugin from \"fastify-plugin\";\n\nimport fastifyCors, { FastifyCorsOptions } from \"@fastify/cors\";\n\nexport default fastifyPlugin(async (fastify) => {\n  await fastify.register<FastifyCorsOptions>(fastifyCors, {});\n}, {\n  name: \"cors\",\n});\n","import fastifyPlugin from \"fastify-plugin\";\n\nimport fastifySwagger,{SwaggerOptions} from \"@fastify/swagger\";\n\nexport default fastifyPlugin(async (fastify) => {\n  fastify.register<SwaggerOptions>(fastifySwagger, {});\n}, {\n  name: \"swagger\",\n});\n","import fastifyPlugin from \"fastify-plugin\";\n\nimport fastifyWebsocket, { WebsocketPluginOptions } from \"@fastify/websocket\";\n\nexport default fastifyPlugin(async (fastify) => {\n  await fastify.register<WebsocketPluginOptions>(fastifyWebsocket, {});\n}, {\n  name: \"websocket\",\n});\n","import fastifyPlugin from \"fastify-plugin\";\nimport cors from \"./cors\";\nimport swagger from \"./swagger\";\nimport websocket from \"./websocket\";\n\nexport default fastifyPlugin(async (instance) => {\n  await instance.register(cors);\n  await instance.register(websocket);\n  await instance.register(swagger);\n}, {\n  name: \"plugins\",\n});\n","import fastifyPlugin from \"fastify-plugin\";\n\nexport default fastifyPlugin(async (fastify) => {\n  fastify.route({\n    url: \"/sign\",\n    method: \"GET\",\n    async handler() {\n    },\n  });\n}, {name: \"auth-route\"});\n","import fastifyPlugin from \"fastify-plugin\";\nimport { Static, Type } from \"@sinclair/typebox\";\nimport { commandOptions } from \"@redis/client\";\n\nexport default fastifyPlugin<{ prefix: string }>(async (fastify, opts) => {\n  const emptyBitmap = Buffer.from(Uint8ClampedArray.from(\n    new Array(1920 * 1080),\n    (_, i) => (i % 1080 && i % 2) ? 15 : 0,\n  ));\n  const paramsSchema = Type.Object({\n    index: Type.Integer({minimum: 1, maximum: 10}),\n  });\n  fastify.route<{\n    Params: Static<typeof paramsSchema>\n  }>({\n    url: `${opts.prefix}/bitmap/:index`,\n    method: \"GET\",\n    schema: {\n      params: paramsSchema,\n    },\n    async handler(req, reply) {\n      // 480*270\n      const {redis} = fastify;\n      const {index} = req.params;\n\n      let bitmap: Buffer | null = await redis.get(\n        commandOptions({returnBuffers: true}),\n        `place_bitmap_${index}`,\n      );\n      if (bitmap == null) {\n        bitmap = emptyBitmap;\n        await redis.set(`place_bitmap_${index}`, emptyBitmap);\n      }\n      reply.type(\"application/octet-stream\");\n      reply.send(bitmap.subarray(0, 1920 * 1080));\n    },\n  });\n});\n","import fastifyPlugin from \"fastify-plugin\";\n\n\nexport default fastifyPlugin<{ prefix: string }>(async (fastify, opts) => {\n  fastify.route({\n    url: `${opts.prefix}/draw`,\n    method: \"GET\",\n    async handler() {\n    },\n  });\n});\n","import fastifyPlugin from \"fastify-plugin\";\n\n\nexport default fastifyPlugin<{ prefix: string }>(async (fastify, opts) => {\n  fastify.route({\n    url: `${opts.prefix}/pixel/:id`,\n    method: \"GET\",\n    async handler(req, reply) {\n      reply.send({hello: \"world\"});\n    },\n  });\n});\n","import fastifyPlugin from \"fastify-plugin\";\n\nexport default fastifyPlugin<{ prefix: string }>(async (fastify, opts) => {\n  fastify.get(`${opts.prefix}/`, {websocket: true}, async (connect) => {\n    connect.socket.on(\"message\", (message) => {\n      console.log(message);\n    });\n  });\n});\n\n","import fastifyPlugin from \"fastify-plugin\";\nimport bitmap from \"./bitmap\";\nimport draw from \"./draw\";\nimport pixel from \"./pixel\";\nimport ws from \"./ws\";\n\nexport default fastifyPlugin(async (fastify, opts: { prefix: string }) => {\n  await fastify.register(bitmap, opts);\n  await fastify.register(pixel, opts);\n  await fastify.register(draw, opts);\n  await fastify.register(ws, opts);\n}, {name: \"board-route\"});\n","import fastifyPlugin from \"fastify-plugin\";\nimport auth from \"./auth\";\nimport board from \"./board\";\n\nexport default fastifyPlugin(async (fastify) => {\n  await fastify.register(auth, {prefix: \"/auth\"});\n  await fastify.register(board, {prefix: \"/board\"});\n}, {name: \"routes\"});\n","import type { RedisClientOptions, RedisClientType, RedisFunctions, RedisModules, RedisScripts } from \"@redis/client\";\nimport { createClient } from \"@redis/client\";\nimport fastifyPlugin from \"fastify-plugin\";\n\ndeclare module \"fastify\" {\n  interface FastifyInstance {\n    redis: RedisClientType & {\n      [namespace: string]: RedisClientType\n    };\n  }\n}\n\nexport type RedisPluginOptions = RedisClientOptions\n\nexport default fastifyPlugin<RedisPluginOptions>(async (fastify, opts) => {\n  if (fastify.redis) {\n    throw new Error(\"redis has already been registered\");\n  }\n  const client: RedisClientType<any, any, any> = createClient(opts);\n  fastify.decorate(\"redis\", client);\n  fastify.addHook(\"onClose\", () => {\n    client.quit();\n  });\n  try {\n    await client.connect();\n    await client.ping();\n  } catch (error) {\n    fastify.log.error(error, `[redis plugin]: ${(error as Error).message}`);\n  }\n});\n","import fastifyPlugin from \"fastify-plugin\";\nimport redis, { RedisPluginOptions } from \"./client/redis\";\n\nexport default fastifyPlugin(async (fastify) => {\n  await fastify.register<RedisPluginOptions>(redis, fastify.config.redisStorage);\n}, {name: \"routes\"});\n","import { RedisClientType } from \"@redis/client\";\nimport fastifyPlugin from \"fastify-plugin\";\nimport { Document, parseDocument } from \"yaml\";\nimport fs from \"fs\";\nimport { RedisPluginOptions } from \"./storage/client/redis\";\nimport path from \"path\";\n\ninterface ConfigPluginOptions {\n  configPath?: string;\n}\n\ndeclare module \"fastify\" {\n  interface FastifyInstance {\n    config: Config;\n  }\n}\n\ninterface Config {\n  redisStorage: RedisPluginOptions;\n}\n\nconst defaultConfig: Config = {\n  redisStorage: {\n    url: undefined,\n  },\n};\n\nexport default fastifyPlugin<ConfigPluginOptions>(async (fastify, opts) => {\n  const {configPath} = opts;\n  let config: Config = defaultConfig;\n  if (configPath) {\n    if (fs.existsSync(configPath)) {\n      config = Object.assign(defaultConfig, parseDocument(fs.readFileSync(configPath, \"utf-8\")).toJS());\n    } else {\n      fs.mkdirSync(path.dirname(configPath), {recursive: true});\n      fs.writeFileSync(configPath, new Document(defaultConfig).toString());\n    }\n  }\n  fastify.decorate(\"config\", config);\n});\n","import Fastify from \"fastify\";\nimport plugins from \"./plugins\";\nimport routes from \"./routes\";\nimport storage from \"./storage\";\nimport pino from \"pino\";\nimport pinoPretty from \"pino-pretty\";\nimport config from \"./config\";\n\nconst fastify = Fastify({logger: pino(pinoPretty({singleLine: true}))});\nfastify.register(config, {configPath: \"config.yaml\"});\nfastify.register(plugins);\nfastify.register(storage);\nfastify.register(routes);\nfastify.listen({host: \"0.0.0.0\", port: 8080}, (error) => {\n  if (!error) {\n    process.on(\"uncaughtException\", (error) => {\n      fastify.log.error(error, `[uncaughtException]: ${(error as Error).message}`);\n    });\n    process.on(\"unhandledRejection\", (error) => {\n      fastify.log.error(error, `[unhandledRejection]: ${(error as Error).message}`);\n    });\n  } else {\n    fastify.log.error(error);\n    process.exit(1);\n  }\n});\n"],"names":["fastifyPlugin","fastifyCors","fastifySwagger","fastifyWebsocket","Type","commandOptions","client","createClient","fs","parseDocument","path","Document","Fastify","pino","pinoPretty"],"mappings":"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"}